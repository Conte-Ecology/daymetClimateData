#rm(list=setdiff(ls(), "CATCHMENTS"))
rm(list=ls())
#library(dplyr)
library(maptools)
#library(RSQLite)
#library(RSQLite.extfuns)
#library(ncdf4)
#library(reshape2)
#library(tcltk)
library(maptools)
proj4.Lambert <- "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0"
# Temporal range
START_YEAR <- 1980
END_YEAR <- 2013
YEARS <- seq(from = startYear, to = endYear, by = 1)
# Variables
VARIABLES <- c('tmax', 'tmin', 'prcp', 'dayl', 'srad', 'vp', 'swe')
# Destination folder of the raw Daymet data
DAYMET_DIRECTORY <- '//IGSAGBEBWS-MJO7/projects/dataIn/environmental/climate/daymet/Daily'
source('C:/KPONEIL/GitHub/projects/daymetClimateData/scripts/functions/daymetMosaicDownload.R')
daymetMosaicDownload(startYear = START_YEAR,
endYear = END_YEAR,
variables = VARIABLES,
destinationFolder = file.path(DAYMET_DIRECTORY),
retryFailedDownloads = TRUE)
daymetMosaicDownload(years = YEARS,
variables = VARIABLES,
destinationFolder = file.path(DAYMET_DIRECTORY),
retryFailedDownloads = TRUE)
YEARS <- seq(from = START_YEAR, to = END_YEAR, by = 1)
daymetMosaicDownload(years = YEARS,
variables = VARIABLES,
destinationFolder = file.path(DAYMET_DIRECTORY),
retryFailedDownloads = TRUE)
DAYMET_DIRECTORY <- 'C:/KPONEIL/workspace/testDaymet'
daymetMosaicDownload(years = YEARS,
variables = VARIABLES,
destinationFolder = file.path(DAYMET_DIRECTORY),
retryFailedDownloads = TRUE)
CATCHMENTS <- readShapePoly('C:/KPONEIL/GitHub/projects/daymetClimateData/gisFiles/shapefiles/NENYHRD_AllCatchments_DaymetPrj.shp', proj4string=CRS(proj4.Lambert))
DAYMET_DIRECTORY <- '//IGSAGBEBWS-MJO7/projects/dataIn/environmental/climate/daymet/Daily'
zoneField <- 'FEATUREID'
daymetDirectory <- DAYMENT_DIRECTORY
variables <- VARIABLES
years <- YEARS
daymetDirectory <- DAYMET_DIRECTORY
require(dplyr)
require(ncdf4)
require(rgdal)
source('C:/KPONEIL/GitHub/projects/daymetClimateData/scripts/functions/tileCatchmentsShapefile.R')
transformShapefile <- spTransform(catchmentsShapefile,
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"),
class = "SpatialPolygonsDataFrame")
catchmentsShapefile <- CATCHMENTS
transformShapefile <- spTransform(catchmentsShapefile,
CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"),
class = "SpatialPolygonsDataFrame")
# Tiles the catchment shapefile into 2 degree sections to prevent memory issues when pulling netCDF data
tiledShapefile <- tileCatchmentsShapefile(transformShapefile)
length(tiledShapefile)
str(tiledShapefile)
EXT <- extent(transformShapefile)
EXT
shapefile <- catchmentsShapefile
EXT <- extent(shapefile)
xmin <- floor(EXT@xmin)
xmax <- ceiling(EXT@xmax)
ymin <- floor(EXT@ymin)
ymax <- ceiling(EXT@ymax)
xmin
xmax
shapefile <- transformCatchmentsShapefile
shapefile <- transformShapefile
EXT <- extent(shapefile)
xmin <- floor(EXT@xmin)
xmax <- ceiling(EXT@xmax)
ymin <- floor(EXT@ymin)
ymax <- ceiling(EXT@ymax)
xmin
xmax
EXT
EXT$xmin - EXT$xmax
str(EXT)
EXT@xmin
EXT@xmin - EXT@xmax
abs(EXT@xmin - EXT@xmax)
EXT@ymin - EXT@ymax
xmax
xmin
ymin
ymax
seq(from = ymin, to = ymax+1, by = degrees)
degrees = 2
seq(from = ymin, to = ymax+1, by = degrees)
seq(from = ymin, to = 47, by = degrees)
seq.int(from = ymin, to = 47, by = degrees)
abs(xmax - xmin)/2
xmax
xmin
(xmax - xmin)/2
seq(from = xmin, to = xmax+1, by = degrees)
xmax
xmin
-2 - 2
2 - -2
abs(ymax - ymin)/2
ymin
ymax
abs(ymax - 41)/2
ceiling(abs(ymax - 41)/2)
ceiling(abs(xmax - xmin)/2)
ceiling(abs(ymax - ymin)/2)
seq.int(from = EXT@xmin, to = EXT@xmax, by = degrees)
Xs <- seq(from = xmin, to = xmax+1, length.out = lengthX, by = degrees)
lengthX <- ceiling(abs(xmax - xmin)/2)
lengthY <- ceiling(abs(ymax - ymin)/2)
lengthX
Xs <- seq(from = xmin, to = xmax, length.out = lengthX, by = degrees)
lengthX <- ceiling(abs(xmax - xmin)/degrees)
lengthY <- ceiling(abs(ymax - ymin)/degrees)
seq(from = xmin, to = xmax, length.out = lengthX)
lengthX
xmax
xmin
seq(from = xmin, to = xmax, length.out = lengthX)
xmin
xmax
lengthX <- ceiling(abs(xmax - xmin)/degrees)+1
lengthY <- ceiling(abs(ymax - ymin)/degrees)+1
seq(from = xmin, to = xmax, length.out = lengthX)
xmin
EXT
xmax
?diff
diff(c(xmin, xmax))
diff(c(xmin, xmax), 2)
diff(c(xmin, xmax), 3)
diff(c(xmin, xmax), 1)
abs(EXT@xmax - EXT@xmin)
ceiling(abs(EXT@xmax - EXT@xmin)/degrees)
abs(EXT@xmax - EXT@xmin)/degrees
lengthX <- ceiling(abs(EXT@xmax - EXT@xmin)/degrees)+1
seq(from = xmin, to = xmax, length.out = lengthX)
degrees = 3
lengthX <- ceiling(abs(EXT@xmax - EXT@xmin)/degrees)+1
seq(from = xmin, to = xmax, length.out = lengthX)
degrees
degrees = 2
abs(EXT@xmin - EXT@xmax) <= 2
& abs(EXT@ymax - EXT@ymin) <= 2
abs(EXT@ymax - EXT@ymin) <= 2
abs(EXT@xmin - EXT@xmax) <= 2 & abs(EXT@ymax - EXT@ymin) <= 2
test <- shapefile[1:10,]
EXT <- extent(test)
abs(EXT@xmin - EXT@xmax) <= 2 & abs(EXT@ymax - EXT@ymin) <= 2
EXT
source('C:/KPONEIL/GitHub/projects/daymetClimateData/scripts/functions/tileCatchmentsShapefile.R')
tiledShapefile <- tileCatchmentsShapefile(shapefile = transformShapefile)
spatialNCDF <- nc_open(file.path(daymetDirectory, paste0( variables[1], '_', years[1], '.nc4') ) )  #netcdf
?spTransform
str(CATCHMENTS)
class(CATCHMENTS)
test <- tileCatchmentsShapefile(shapefile = transformShapefile[1:10,])
test
source('C:/KPONEIL/GitHub/projects/daymetClimateData/scripts/functions/tileCatchmentsShapefile.R')
test <- tileCatchmentsShapefile(shapefile = transformShapefile[1:10,])
mosaicLat = ncvar_get ( nc    = spatialNCDF,
varid = "lat",
start = c(1,1),
count = c(spatialNCDF$var$lat$varsize[1],
spatialNCDF$var$lat$varsize[2]) )
# Longitude coordinates in full mosaic
mosaicLon = ncvar_get ( nc    = spatialNCDF,
varid = "lon",
start = c(1,1),
count = c(spatialNCDF$var$lon$varsize[1],
spatialNCDF$var$lon$varsize[2]) )
t = 1
tile <- tiledShapefile[[t]]
# Print status
print(paste("Beginning spatial analysis of tile", t, "of", length(tiledShapefile), ", which has", nrow(tile), "catchments."))
tileExtent <- extent(tile)
# Determine the array positions of coordinates within the shapefile extent for spatial referencing
arrayIndeces <- which( mosaicLat >= tileExtent@ymin &
mosaicLat <= tileExtent@ymax &
mosaicLon >= tileExtent@xmin &
mosaicLon <= tileExtent@xmax,
arr.ind    = T)
minRow <- min(arrayIndeces[,1])
maxRow <- max(arrayIndeces[,1])
minCol <- min(arrayIndeces[,2])
maxCol <- max(arrayIndeces[,2])
# Number of rows and columns
countx = maxRow - minRow + 1
county = maxCol - minCol + 1
# Save the spatial references for use in other netCDF files
mosaicIndeces[[t]] <- data.frame(tile = t,
minRow = minRow,
maxRow = maxRow,
minCol = minCol,
maxCol = maxCol,
countx = countx,
county = county)
mosaicIndeces <- list()
tileIndeces   <- list()
mosaicIndeces[[t]] <- data.frame(tile = t,
minRow = minRow,
maxRow = maxRow,
minCol = minCol,
maxCol = maxCol,
countx = countx,
county = county)
tileLat = ncvar_get( nc    = spatialNCDF,
varid = "lat",
start = c(minRow, minCol),
count = c(countx,county) )
# Longitude coordinates in the current tile
tileLon = ncvar_get( nc    = spatialNCDF,
varid = "lon",
start = c(minRow, minCol),
count = c(countx,county) )
# Close connection
nc_close(spatialNCDF)
tilePoints <- as.data.frame( cbind( as.vector(tileLon), as.vector(tileLat) ) )
colnames(tilePoints) <- c("Longitude", "Latitude")
tilePointsSpPts   <- SpatialPoints(tilePoints, proj4string = CRS(proj4string(transformShapefile)))
head(tilePointsSpPts)
head(tile)
overPoints <- over(tilePointsSpPts, tile)
head(overPoints)
spatialJoin <- cbind(overPoints, tilePoints)
head(spatialJoin)
head(polygonPoints)
polygonPoints <- spatialJoin[which(!is.na(spatialJoin[,zoneField])),]
head(polygonPoints)
missingPolygons <- tile[!tile@data[,zoneField] %in% polygonPoints[,zoneField],]
head(missingPolygons)
missingCentroids <- data.frame(missingPolygons@data[,zoneField], coordinates(missingPolygons) )
head(missingCentroids)
names(missingCentroids) <- c(zoneField, 'LON', 'LAT')
missingIDs <- missingPolygons@data[,zoneField]
nearPoints <- as.data.frame(matrix(nrow = length(missingIDs), ncol = 3))
names(nearPoints) <- c(zoneField, 'Longitude', 'Latitude')
head(nearPoints)
for ( i in seq_along(missingIDs) ) {
# Polygon centroid coordinates
tempLat <- missingCentroids$LAT[missingCentroids[,zoneField] == missingIDs[i]]
tempLon <- missingCentroids$LON[missingCentroids[,zoneField] == missingIDs[i]]
# Determine the nearest Daymet point
distances <- spDistsN1(as.matrix(tilePoints), c(tempLon, tempLat), longlat = TRUE)
minDist <- min(distances)
distPos <- which(distances == minDist)[1]
# Enter values into dataframe
nearPoints[i ,zoneField] <- missingIDs[i]
nearPoints$Longitude[i]  <- tilePoints[distPos, 1]
nearPoints$Latitude[i]   <- tilePoints[distPos, 2]
}
dim(nearPoints)
finalPoints <- rbind(polygonPoints[,c(zoneField, 'Longitude', 'Latitude')], nearPoints)
finalPoints$subRow <- NA; finalPoints$subCol <- NA
for ( m in 1:nrow(finalPoints) ){
# Find th position in the array of the variable by matching assigned Daymet coordinates
position <- which(tileLon == finalPoints$Longitude[m] & tileLat == finalPoints$Latitude[m], arr.in = TRUE)
finalPoints$subRow[m] <- as.numeric(position[,1])
finalPoints$subCol[m] <- as.numeric(position[,2])
}
head(finalPoints)
tileIndeces[[t]] <- finalPoints
names(tileIndeces)[t] <- paste0("Tile", t)
print(paste("Tile", t, "complete."))
proj4string(catchmentShapefile)
zonesShapefile <- CATCHMENTS
proj4string(zonesShapefile)
proj4string(zonesShapefile) == "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0"
proj4string(zonesShapefile) != "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0"
zonesShapefile <- CATCHMENTS
if (proj4string(zonesShapefile) != "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0")
{stop("The correct projection has not been defined for the shapefile")}
proj4.Lambert <- "x"
zonesShapefile <- CATCHMENTS
if (proj4string(zonesShapefile) == "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0")
{stop("The correct projection has not been defined for the shapefile")}
proj4.Lambert <- "x"
stopTest <- function(x){
if (proj4string(zonesShapefile) == "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0")
{stop("The correct projection has not been defined for the shapefile")}
y <- x
return(y)
}
stopTest(10)
zonesShapefile <- CATCHMENTS[1:2000,]
# Return an error
if (proj4string(zonesShapefile) != "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0")
{stop("Error: The correct projection has not been defined for the shapefile. Shapefile should be read in as Lambert (+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0)."}
zonesShapefile@data$ZONE_FIELD <- zonesShapefile@data[,ZONE_FIELD]
ZONE_FIELD <- "FEATUREID"
proj4string(zonesShapefile)
proj4string(zonesShapefile) != "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0")
proj4string(zonesShapefile) != "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0"
if (proj4string(zonesShapefile) != "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0"){
stop("Error: The correct projection has not been defined for the shapefile. Shapefile should be read in as Lambert (+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0)."}
zonesShapefile@data$ZONE_FIELD <- zonesShapefile@data[,ZONE_FIELD]
if (proj4string(zonesShapefile) != "+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0"){
stop("Error: The correct projection has not been defined for the shapefile. Shapefile should be read in as Lambert (+proj=lcc +ellps=WGS84 +datum=WGS84 +lat_1=25 +lat_2=60 +lat_0=42.5 +lon_0=-100 +x_0=0 +y_0=0).")
}
zonesShapefile@data$ZONE_FIELD <- zonesShapefile@data[,ZONE_FIELD]
head(zonesShapefile)
dim(zonesShapefile)
spatialIndeces <- determineSpatialRelationships(zonesShapefile = zonesShapefile,
zoneField = ZONE_FIELD,
exampleDaymetFile = file.path(daymetDirectory, paste0(variables[1], '_', years[1], '.nc4') ) )
source('C:/KPONEIL/GitHub/projects/daymetClimateData/scripts/functions/determineSpatialRelationships.R')
spatialIndeces <- determineSpatialRelationships(zonesShapefile = zonesShapefile,
zoneField = ZONE_FIELD,
exampleDaymetFile = file.path(daymetDirectory, paste0(variables[1], '_', years[1], '.nc4') ) )
spatialIndeces
dim(spatialIndeces[[1]])
dim(spatialIndeces[[2]])
dim(spatialIndeces[1)
dim(spatialIndeces[1])
head(spatialIndeces)
str(spatialIndeces)
mosaicIndeces <- spatialIndeces$mosaicIndeces
tileIndeces <- spatialIndeces$tileIndeces
t=1
curTile <- tileIndeces[[t]]
cats <- unique(curTile[,zoneField])
# Status update
print(paste("Beginning variable indexing for tile", t, "of", length(tileIndeces), ", which has", length(cats), "catchments."))
currentTile <- tileIndeces[[t]]
zones <- unique(currentTile[,zoneField])
# Status update
print(paste("Beginning variable indexing for tile", t, "of", length(tileIndeces), ", which has", length(zones), "catchments."))
years
year = 1980
S <- proc.time()[3]
annualRecord <- NULL
variables
variable = 'tmax'
NetCDF <- nc_open( file.path(daymetDirectory, paste0(variable, '_', year, '.nc4') ) )
tileVar = ncvar_get( nc    = NetCDF,
varid = variable,
start = c(mosaicIndeces$minRow[t], mosaicIndeces$minCol[t], 1),
count = c(mosaicIndeces$countx[t], mosaicIndeces$county[t], 365) )
dim(tileVar)
length(NetCDF$var)
for( h in 1:length(NetCDF$var) ){
if ( NetCDF$var[[h]]$name == variable ) {varIndex <- h}
}
varIndex
missingValue <- NetCDF$var[[varIndex]]$missval
missingValue
length(which(tileVar == -9999))
tileVar <- replace(tileVar, tileVar == missingValue, NA)
nc_close(NetCDF)
varPoints <- data.frame(matrix(nrow = nrow(currentTile), ncol = 366))
names(varPoints) <- c(zoneField, 1:365)
varPoints[,zoneField] <- currentTile[,zoneField]
head(varPoints)
dim(varPOints)
dim(varPoints)
for (sel in 1:365){
select <- as.matrix(data.frame(currentTile[c('subRow', 'subCol')], sel) )
varPoints[,sel+1] <- tileVar[select]
}
head(varPoints)
varPoints$ZONE <- varPoints[,zoneField]
varMeans <-  group_by(varPoints, ZONE) %>%
summarise_each(funs(mean))%>%
group_by() %>%
select( -ZONE )
head(varPoints)
group_by(varPoints, ZONE) %>%
summarise_each(funs(mean))
group_by(varPoints, ZONE) %>%
summarise_each(funs(mean))%>%
group_by()
group_by(varPoints, ZONE) %>%
summarise_each(funs(mean))%>%
group_by() %>%
select( -ZONE )
varMeans <-  group_by(varPoints, ZONE) %>%
summarise_each(funs(mean))%>%
group_by()
head(varMeans)
dim(varMeans)
select(varMeans, -ZONE )
select(varMeans, ZONE)
select(varMeans, ZONE)
select(varMeans, ZONE = 730076)
select(varMeans, FEATUREID)
test <- varMeans
test <- data.frame(varMeans)
select(test, FEATUREID)
library(dplyr)
select(test, FEATUREID)
str(test)
test <- varMeans[, - "ZONE"]
test <- varMeans[, -which(names(varMeans) == "ZONE")]
head(test)
str(test)
test <- data.frame(1,2,2,34)
test
names(test) <- c("A","B","C","D")
test
select(test, A)
str(varMeans)
test <- as.data.frame(varMeans)
select(test, ZONE)
ZONE_FIELD <- "FEATUREID"
DATABASE_NAME <- 'DaymetByNENYHRDCatchments'
library(dplyr)
rm(select)
library(dplyr)
varMeans <-  group_by(varPoints, ZONE) %>%
summarise_each(funs(mean))%>%
group_by() %>%
select( -ZONE )
